#!/usr/share/ucs-test/runner bash
## desc: "Testing password changing with udm, samba and kerberos"
## exposure: safe
## packages:
##  - univention-samba4
## roles:
## - domaincontroller_master
## tags: [basic]
. "$TESTLIBPATH/user.sh" || exit 137
. "$TESTLIBPATH/shares.sh" || exit 137
. "$TESTLIBPATH/random.sh" || exit 137

#----create User
SAMBA="true"
MAIL="false"
KERBEROS="true"
PERSON="false"
POSIX="true"

username="$(user_randomname)"
first_password=univention
second_password="$(random_chars 8 ${_upperletters}${_lowerletters}${_ciphers}äöü)z1AÄÖÜ"
third_password="$(random_chars 8 ${_upperletters}${_lowerletters}${_ciphers}äöü)z1AÄÖÜ"
fourth_password="$(random_chars 8 ${_upperletters}${_lowerletters}${_ciphers}äöü)z1AÄÖÜ"

min_pwd_age="$(samba-tool domain passwordsettings show | grep "Minimum password age" | sed s/[^0-9]*/""/)"
samba-tool domain passwordsettings show
samba-tool domain passwordsettings set --complexity=off
samba-tool domain passwordsettings set --min-pwd-age=0
samba-tool domain passwordsettings show
trap 'user_remove "$username";samba-tool domain passwordsettings set --min-pwd-age=$min_pwd_age;samba-tool domain passwordsettings set --complexity=on' INT TERM EXIT

user_create "$username" || fail_test 1 "Could not create user $username."

echo "----initial connection"
#wait for the user to be created
i=0
val_ldbsearch=1
val_kinit=1
val_udm=1
while true
do
    ldbsearch -U "$username%$first_password" -H ldap://localhost "cn=$username" | grep "$username" > /dev/null && val_ldbsearch=0
    /usr/sbin/univention-directory-manager users/user list --binddn "$USER_DN" --bindpwd "$first_password" > /dev/null && val_udm=0
    echo "$first_password" | kinit --password-file=STDIN "$username" > /dev/null && val_kinit=0

    if [ "$i" == 9 -o "$val_ldbsearch" == 0 -a "$val_kinit" == 0 -a "$val_udm" == 0  ]; then
	echo i="$i"
	echo "val_ldbsearch $val_ldbsearch"
	echo "val_udm $val_udm"
	echo "val_kinit $val_kinit"
	break
    fi
    let i=$i+1
    sleep 2
done

if [ "$val_ldbsearch" != 0 ]; then
    fail_test 1 "Could not authentificate with samba."
fi
if [ "$val_udm" != 0 ]; then
    fail_test 1 "Could not authentificate with UDM."
fi
if [ "$val_kinit" != 0 ]; then
    fail_test 1 "Could not authentificate with kinit."
fi


USER_DN="$(univention-directory-manager users/user list --filter uid="$username" | sed -ne 's/^DN: //p')"

echo "----password change with samba-tool"
#--test starting point
#----password change with samba-tool
samba-tool user setpassword "$username" --newpassword="$second_password" 

i=0
val_ldbsearch=1
val_kinit=1
val_udm=1
while true
do
    ldbsearch -U "$username%$second_password" -H ldap://localhost "cn=$username" | grep "$username" > /dev/null && val_ldbsearch=0
    /usr/sbin/univention-directory-manager users/user list --binddn "$USER_DN" --bindpwd "$second_password" > /dev/null && val_udm=0
    echo "$second_password" | kinit --password-file=STDIN "$username" > /dev/null && val_kinit=0

    if [ "$i" == 9 -o "$val_ldbsearch" == 0 -a "$val_kinit" == 0 -a "$val_udm" == 0  ]; then
	echo i="$i"
	echo "val_ldbsearch $val_ldbsearch"
	echo "val_udm $val_udm"
	echo "val_kinit $val_kinit"
	break
    fi
    let i=$i+1
    sleep 2
done

if [ "$val_ldbsearch" != 0 ]; then
    fail_test 1 "Could not authentificate with samba after password change with samba."
fi
if [ "$val_udm" != 0 ]; then
    fail_test 1 "Could not authentificate with UDM after password change with samba."
fi
if [ "$val_kinit" != 0 ]; then
    fail_test 1 "Could not authentificate with kinit after password change with samba."
fi


echo "----password change with udm"
#----password change with udm
/usr/sbin/univention-directory-manager users/user modify --binddn "$ADMINISTRATOR_DN" --bindpwd "$ADMINISTRATOR_PASSWORD" --dn "$USER_DN" --set "password=$third_password" || fail_test 1 "Could not change password with UDM"

i=0
val_ldbsearch=1
val_kinit=1
val_udm=1
while true
do
    ldbsearch -U "$username%$third_password" -H ldap://localhost "cn=$username" | grep "$username" > /dev/null && val_ldbsearch=0
    /usr/sbin/univention-directory-manager users/user list --binddn "$USER_DN" --bindpwd "$third_password" > /dev/null && val_udm=0
    echo "$third_password" | kinit --password-file=STDIN "$username" > /dev/null && val_kinit=0

    if [ "$i" == 9 -o "$val_ldbsearch" == 0 -a "$val_kinit" == 0 -a "$val_udm" == 0  ]; then
      	echo i="$i"
	echo "val_ldbsearch $val_ldbsearch"
	echo "val_udm $val_udm"
	echo "val_kinit $val_kinit"
	break
    fi
    let i=$i+1
    sleep 2
done

if [ "$val_ldbsearch" != 0 ]; then
    fail_test 1 "Could not authentificate with samba after password change with UDM."
fi
if [ "$val_udm" != 0 ]; then
    fail_test 1 "Could not authentificate with UDM after password change with UDM."
fi
if [ "$val_kinit" != 0 ]; then
    fail_test 1 "Could not authentificate with kinit after password change with UDM."
fi


echo "----password change with kpassword"
#----password change with kpassword
i=0
while true
do
    if [ $(ucr get server/role) == "domaincontroller_master" -a -e /root/root.secret ];then
	retval="$(python kpasswd_change_pwd.py -u "$username" -r "$(cat /root/root.secret)" -n "$fourth_password" -p "$third_password" -a "$ADMINISTRATOR_USER")"
    else
	retval="$(python kpasswd_change_pwd.py -u "$username" -r "$ADMINISTRATOR_PASSWORD" -n "$fourth_password" -p "$third_password" -a "$ADMINISTRATOR_USER")"
    fi
    echo "$retval"
    echo "$retval" | grep "nSoft" || break
    if [ "$i" == 20  ]; then
	echo "Password change with kpasswd: Soft error."
	break
    fi
    let i=$i+1
    sleep 5
done
echo "i: $i"

i=0
val_ldbsearch=1
val_kinit=1
val_udm=1
while true
do
    ldbsearch -U "$username%$fourth_password" -H ldap://localhost "cn=$username" | grep "$username" > /dev/null && val_ldbsearch=0
    /usr/sbin/univention-directory-manager users/user list --binddn "$USER_DN" --bindpwd "$fourth_password" > /dev/null && val_udm=0
    echo "$fourth_password" | kinit --password-file=STDIN "$username" > /dev/null && val_kinit=0

    if [ "$i" == 9 -o "$val_ldbsearch" == 0 -a "$val_kinit" == 0 -a "$val_udm" == 0  ]; then
	echo i="$i"
	echo "val_ldbsearch $val_ldbsearch"
	echo "val_udm $val_udm"
	echo "val_kinit $val_kinit"

	break
    fi
    let i=$i+1
    sleep 2
done

if [ "$val_ldbsearch" != 0 ]; then
    fail_test 1 "Could not authentificate with samba after password change with kpasswd."
fi
if [ "$val_udm" != 0 ]; then
    fail_test 1 "Could not authentificate with UDM after password change with kpasswd."
fi
if [ "$val_kinit" != 0 ]; then
    fail_test 1 "Could not authentificate with kinit after password change with kpasswd."
fi


exit $RETVAL