#!/bin/bash
#
# Univention Samba4
#  join script
#
# Copyright 2004-2012 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

VERSION=4
. /usr/share/univention-join/joinscripthelper.lib
joinscript_init

. /usr/share/univention-lib/all.sh
. /usr/share/univention-samba4/lib/all.sh

LDB_MODULES_PATH=/usr/lib/ldb; export LDB_MODULES_PATH;		## currently necessary for ldbtools

eval "$(univention-config-registry shell)"

# samba4 allowd on this system?
if is_ucr_true samba4/disabled; then
	echo "WARNING: samba4 on this system is not allowed."
	echo "         The samba4 join stops here. To rerun the"
	echo "         join script, use "
	echo "         -> univention-run-join-scripts"
	exit 0
fi

s3setup="$(ldapsearch -x -ZZ -D "$ldap_hostdn" -y /etc/machine.secret \
		   '(&(univentionService=Samba 3)(objectClass=univentionDomainController))' -LLL dn \
		   | sed -ne 's|dn: ||p')"
if [ -n "$s3setup" ] && is_domain_controller; then

	if is_ucr_true samba4/ignore/mixsetup; then
		echo "WARNING: It is not possible to install a samba 4 domaincontroller "
		echo "         into a samba 3 environment. samba4/ignore/mixsetup is true."
		echo "         Continue as requested"
	else
		# Try to install a S4 DC in a S3 environment ...
		echo "ERROR: It is not possible to install a samba 4 domaincontroller "
		echo "       into a samba 3 environment."
		exit 1
	fi
fi

NAME="Samba 4"
SYSVOL_PATH='/var/lib/samba/sysvol'

### --- BEGIN helper functions ---

extract_binddn_and_bindpwd_from_args() {
	## parse binddn and bindpwd from command line arguments into shell variables
	eval $(echo "$@" | sed -n 's/.*--binddn \(.*\) --bindpwd \(.*\).*/binddn="\1"\nbindpwd="\2"/p')
	if [ -n "$binddn" ]; then
		dcaccount="$(ldapsearch -xLLL -ZZ -D "$ldap_hostdn" -y /etc/machine.secret \
		             -s base -b "$binddn" uid | ldapsearch-wrapper | sed -n 's/^uid: \(.*\)$/\1/p')"
	fi
}

operatingSystem_attribute() {
	operation=$1

	if [ "$operation"  == 'add' ]; then
		operatingSystem="$(ldbsearch -H tdb:///var/lib/samba/private/sam.ldb \
			-b "CN=$hostname,OU=Domain Controllers,$samba4_ldap_base" \
			operatingSystem)"
		if [ -n "$operatingSystem" ]; then
			operation=replace
		fi
	fi

	ldbmodify -H tdb:///var/lib/samba/private/sam.ldb <<-%EOF
	dn: CN=$hostname,OU=Domain Controllers,$samba4_ldap_base
	changetype: modify
	$operation: operatingSystem
	operatingSystem: Univention Corporate Server
	-
	$operation: operatingSystemVersion
	operatingSystemVersion: 3.1
	%EOF
}

let_samba4_manage_etc_krb5_keytab() {
	## Let samba4 manage /etc/krb5.keytab
	if [ -e /etc/krb5.keytab ]; then
		cp /etc/krb5.keytab /etc/krb5.keytab.SAVE
	fi

	ldbmodify -H /var/lib/samba/private/secrets.ldb <<-%EOF
	dn: flatname=$windows_domain,cn=Primary Domains
	changetype: modify
	add: krb5Keytab
	krb5Keytab: /etc/krb5.keytab
	-
	%EOF
}

add_servicePrincipals() {
	{
	cat <<-%EOF
	dn: flatname=$windows_domain,cn=Primary Domains
	changetype: modify
	add: servicePrincipalName
	%EOF

	for spn in "$@"; do
		echo "servicePrincipalName: $spn"
	done
	} | ldbmodify -H /var/lib/samba/private/secrets.ldb
}

remove_port ()
{
	if [ -n "$1" -a -n "$2" ]; then
		echo "$1" | sed -e "s|^${2},||;s|,${2},|,|;s|,${2}$||;s|^${2}$||"
	fi

}

create_site() {
	if [ -z "$dcaccount" ] &&  [ -z "$bindpwd" ]; then
		echo "Administative credentials are needed to join to existing Samba4 domain. Please run:"
		printf "\tunivention-run-join-scripts --ask-pass\n"
		echo "to complete the domain join."
		exit 1
	fi

	if ldbsearch -k no -U"$dcaccount"%"$bindpwd" -H "ldap://$ldap_master" -s base > /dev/null 2>&1; then
		/usr/share/univention-samba4/scripts/univention-samba4-site-tool.py \
				-H "ldap://$ldap_master" \
				-U"$dcaccount"%"$bindpwd" \
				--site "$1" --createsite \
				--ignore-exists
	fi
}

set_rid_pool() {
	lower="$1"
	upper="$2"

	ldbmodify -H /var/lib/samba/private/sam.ldb <<-%EOF
	dn: CN=RID Set,CN=$hostname,OU=Domain Controllers,$samba4_ldap_base
	changetype: modify
	replace: rIDAllocationPool
	rIDAllocationPool: ${lower}-${upper}
	-
	replace: rIDPreviousAllocationPool
	rIDPreviousAllocationPool: ${lower}-${upper}
	-
	replace: rIDNextRID
	rIDNextRID: $(($lower + 1))
	%EOF
}

stop_conflicting_services() {
	## stop samba3 services and heimdal-kdc if present
	if [ -x /etc/init.d/samba ]; then
		if [ -n "$(pgrep -f '/usr/sbin/(smbd|nmbd)')" ]; then
			/etc/init.d/samba stop
		fi
	fi
	if [ -x /etc/init.d/winbind ]; then
		if [ -n "$(pgrep -xf /usr/sbin/winbindd)" ]; then
			/etc/init.d/winbind stop
		fi
	fi
	if [ -x /etc/init.d/heimdal-kdc ]; then
		if [ -n "$(pgrep -f '/usr/lib/heimdal-servers/(kdc|kpasswdd)')" ]; then
			/etc/init.d/heimdal-kdc stop
		fi
	fi

	tmp_ucr_key_value_list=()
	if [ "$samba_autostart" != "no" ]; then
			tmp_ucr_key_value_list[0]="samba/autostart=no"
	fi
	if [ "$winbind_autostart" != "no" ]; then
			tmp_ucr_key_value_list[${#tmp_ucr_key_value_list[@]}]="winbind/autostart=no"
	fi
	if [ "$kerberos_autostart" != "no" ]; then
			tmp_ucr_key_value_list[${#tmp_ucr_key_value_list[@]}]="kerberos/autostart=no"
	fi
	if [ -n "$tmp_ucr_key_value_list" ]; then
		univention-config-registry set "${tmp_ucr_key_value_list[@]}"
	fi
	unset tmp_ucr_key_value_list
}

set_samba_role() {
	case "$server_role" in
		domaincontroller_*)
			domaincontroller=true;;
	esac

	if [ "$domaincontroller" = 'true' ]; then
		samba4_role='DC'
	elif [ "$server_role" = "memberserver" ]; then
		samba4_role='MEMBER'
	fi

	univention-config-registry set samba4/role="$samba4_role"
}

set_samba4_ldap_base() {
	default_samba4_ldap_base="DC=$(echo "$kerberos_realm" | sed 's/\./,DC=/g')"
	if [ "$samba4_ldap_base" != "$default_samba4_ldap_base" ]; then
		univention-config-registry set samba4/ldap/base="$default_samba4_ldap_base"
		samba4_ldap_base="$default_samba4_ldap_base"
	fi
}

run_samba_provision() {
	## Provision Samba4
	/usr/share/univention-samba4/scripts/setup-s4.sh "$@" "${SITE_OPTION[@]}"
	rc="$?"
	if [ "$rc" != 0 ]; then
		exit "$rc"
	fi
}

samba_domain_join() {
	local success
	local samba_join_options
	samba_join_options=("${@}")
	samba_join_options+=( --kerberos=no )	## don't use kerberos for authentication during join
	samba_join_options+=( -U"$dcaccount"%"$bindpwd" )
	samba_join_options+=( --realm="$kerberos_realm" )
	samba_join_options+=( --machinepass="$(cat /etc/machine.secret)" )

	if [ -n "$SITE_OPTION" ]; then
		samba_join_options+=( "${SITE_OPTION[@]}" )
	fi

	if [ -n "$samba4_dc" ]; then
		samba-tool domain join "$domainname" "$samba4_role" --server "$samba4_dc" \
							"${samba_join_options[@]}" && success=true
	else
		samba-tool domain join "$domainname" "$samba4_role" \
							"${samba_join_options[@]}" && success=true
		if [ -z "$success" ]; then
			# try again with --server
			cn=($(ldapsearch -x -ZZ -LLL -D "$ldap_hostdn" -y /etc/machine.secret \
						"(&(univentionService=Samba 4)(objectClass=univentionDomainController))" cn \
										| sed -n 's/^cn: \(.*\)/\1/p' ))
			
			for name in "${cn[@]}"; do
				samba-tool domain join "$domainname" "$samba4_role" --server "$name.$domainname" \
								"${samba_join_options[@]}" && success=true
				if [ -n "$success" ]; then
					break
				fi
			done
		fi
	fi
	if [ -z "$success" ]; then
		echo "Failed to join the domain."
		exit 1
	fi
}

disable_slapd_on_standard_port() {
	if [ -n "$slapd_port" ]; then
		univention-config-registry set slapd/port="$(remove_port "$slapd_port" 389)"
	fi
	if [ -n "$slapd_port_ldaps" ]; then
		univention-config-registry set slapd/port/ldaps="$(remove_port "$slapd_port_ldaps" 636)"
	fi

	/etc/init.d/slapd crestart
	sleep 1
}

backup_samba4_keytab() {
	pre_join_kvno=$(ldbsearch -H /var/lib/samba/private/sam.ldb sAMAccountName="$hostname\$" msDS-KeyVersionNumber | sed -n 's/^msDS-KeyVersionNumber: \(.*\)/\1/p')
	if [ -n "$pre_join_kvno" ]; then
		if ! [ -f /etc/krb5.keytab ]; then
			## usually the keytab is removed during 03univention-directory-listener.inst
			## so recreate it with the last known key version
			/usr/share/univention-samba4/scripts/create-keytab.sh
		fi
		if [ -f /etc/krb5.keytab ]; then
			## create a backup from the old keytab
			if [ -d /var/lib/samba/private ]; then
				backup_id=$(date +%Y%m%d-%H%M%S)
				backup_dir="/var/backups/samba4.$backup_id"
				if [ -d "$backup_dir" ]; then
					rm -rf "$backup_dir"
				fi
				mkdir "$backup_dir" && \
				cp /etc/krb5.keytab "$backup_dir"
			fi
		fi
	fi
}

merge_backup_samba4_keytab() {
	if [ -n "$pre_join_kvno" ] && [ -f "$backup_dir/krb5.keytab" ]; then
		post_join_kvno=$(ldbsearch -H /var/lib/samba/private/sam.ldb sAMAccountName="$hostname\$" msDS-KeyVersionNumber | sed -n 's/^msDS-KeyVersionNumber: \(.*\)/\1/p')
		if [ "$post_join_kvno" -gt "$pre_join_kvno" ]; then
			tmp_krb5_keytab=$(mktemp)
			cp "$backup_dir/krb5.keytab" "$tmp_krb5_keytab"
			ktutil copy /etc/krb5.keytab "$tmp_krb5_keytab"
			mv "$tmp_krb5_keytab" /etc/krb5.keytab
		fi
	fi
}

create_and_replicate_DnsZone_partitions() {
	if [ "$s4connectorservicedcs" = "$hostname" ]; then
		## create new DOMAIN/FOREST application partitions
		/usr/sbin/samba_upgradedns
	elif [ -n "$s4connectorservicedcs" ]; then
		## replicate new DOMAIN/FOREST application partitions
		for part in ForestDnsZones, DomainDnsZones; do
			samba-tool drs replicate --full-sync \
								"$s4connectorservicedcs" "$hostname" \
								"DC=$part,$samba4_ldap_base"
		done
	fi
}

set_default_fACL() {
	dirname="$1"
	if ! [ -d "$dirname" ]; then
		print "Warning: $dirname is not a directory"
	fi
	## set default ACLs so sysvol-sync can read files and directories
	nscd -i group
	if ! getent group "Authenticated Users" >/dev/null; then
		/etc/init.d/nscd restart
	fi
	setfacl -R -P -m 'g:Authenticated Users:r-x,d:g:Authenticated Users:r-x' "$dirname"
	rc="$?"
	if [ "$rc" != 0 ]; then
		echo "Error: Could not set fACL for $dirname" >&2
		exit "$rc"
	fi
}

register_server_ips_with_domain() {
	zone="$(udm dns/forward_zone list "$@" --filter zoneName="$domainname" | sed -ne 's|^DN: ||p')"
	if [ -n "$zone" ]; then
		IPs=$(univention-ldapsearch "(&(relativeDomainname=$hostname)(zoneName=$domainname))" aRecord aAAARecord \
		      | sed -ne 's|^aRecord: ||p;s|^aAAARecord: ||p')
		for ip in $IPs; do
			udm dns/forward_zone modify "$@" --ignore_exists --dn "$zone" --append a="$ip"
		done
	fi
}

set_samba4_sysvol_sync_host() {
	## determine default sysvol parent for this host from univentionService="S4 Connector"
	if [ -z "$samba4_sysvol_sync_host" ]; then
		s4connectorservicedcs=$(ldapsearch -x -ZZ -LLL -D "$ldap_hostdn" -y /etc/machine.secret \
		                        "(&(univentionService=S4 Connector)(objectClass=univentionDomainController))" cn \
								| sed -n 's/^cn: \(.*\)/\1/p')      ## currently there is no u-d-m module computers/dc
		if [ -n "$s4connectorservicedcs" ]; then
			univention-config-registry set samba4/sysvol/sync/host="$s4connectorservicedcs"
		fi
	fi
}

remove_non_samba4_dc_srv_records() {

	ldif=$(univention-ldapsearch -LLLx "(&(objectClass=univentionDomainController)(univentionService=Samba 4))" cn associatedDomain | ldapsearch-wrapper)

	samba4_dcs_fqdn_list=("${hostname}.${domainname}")	## initialize with own fqdn for the initial join of the first Samba4 DC
	while read -d '' record; do
		if [ -n "$record" ]; then
			cn=$(sed -n 's/^cn: //p' <<<"$record")
			associatedDomain=$(sed -n 's/^associatedDomain: //p' <<<"$record")
			samba4_dcs_fqdn_list+=("${cn}.${associatedDomain}")
		fi
	done < <(echo -e "$ldif\n" | sed 's/^$/\x0/')

	relativeDomainName_list=('_kerberos._tcp' '_kerberos._udp' '_kpasswd._tcp' '_kpasswd._udp' '_ldap._tcp')

	for record in "${relativeDomainName_list[@]}"; do
		ldap_record=$(univention-ldapsearch -LLLx \
			"(&(objectClass=dNSZone)(zoneName=$domainname)(relativeDomainName=$record))" sRVRecord dn \
			| ldapsearch-wrapper)
		sRVRecord_DN=$(sed -n 's/^dn: //p' <<<"$ldap_record")
		sRVRecord_attrs=$(sed -n 's/^sRVRecord: //p' <<<"$ldap_record")

		zoneDN=$(univention-ldapsearch -LLLx "(&(objectClass=dNSZone)(zoneName=$domainname)(relativeDomainName=@))" dn \
			| ldapsearch-wrapper | sed -n 's/^dn: //p')

		while read line; do
			fields=($line)
			if [ "${#fields[@]}" = 4 ]; then
				unset offers_samba4_service
				for fqdn in "${samba4_dcs_fqdn_list[@]}"; do
					if [ "${fields[3]}" = "$fqdn." ]; then
						offers_samba4_service=1
						break
					fi
				done
				if [ -z "$offers_samba4_service" ]; then
					echo "${fields[3]%%.} is not offering the Service 'Samba 4'"
					echo "Removing dns/srv_record '$line' from $sRVRecord_DN"
					univention-directory-manager dns/srv_record modify "$@" \
								--superordinate "$zoneDN" \
								--dn "$sRVRecord_DN" \
								--remove location="$line"
				fi
			fi
		done <<<"$sRVRecord_attrs"
	done
}

remove_dc_ntds_guid_records_from_dns() {
	local zoneDN
	zoneDN=$(univention-directory-manager dns/forward_zone list "$@" \
				--filter zone=$domainname | sed -n 's/^DN: //p')

	univention-directory-manager dns/alias list "$@" \
		--superordinate "$zoneDN" \
		--filter "(&(cname="$hostname.$domainname.")(name=*._msdcs))" \
		| sed -n 's/^DN: //p' | while read recordDN; do

		univention-directory-manager dns/alias delete "$@" \
			--superordinate "$zoneDN" \
			--dn "$recordDN"
	done
}

### --- END helper functions ---

extract_binddn_and_bindpwd_from_args "$@"

univention-config-registry commit /etc/samba/smb.conf		# 03univention-directory-listener.inst might remove include

if [ "$JS_LAST_EXECUTED_VERSION" = 0 ]; then

	if [ "$samba_quota_command" != None ]; then
		univention-config-registry set samba/quota/command='None'	# currently unsupported in samba4
	fi

	stop_conflicting_services

fi

# during installation samba4/autostart was set to no to prevent a half configured samba server.
if [ "$samba4_autostart" != "yes" ]; then
	univention-config-registry set samba4/autostart=yes
fi

/usr/share/univention-samba4/scripts/mount_extfs_with_user_xattr.py

if [ -z "$samba4_role" ]; then
	set_samba_role
fi

## the code in /usr/share/pyshared/samba/provision.py derives the 'domaindn' from the realm, save it for later use
set_samba4_ldap_base

if [ -n "$samba4_join_site" ]; then
	if [ "$samba4_role" = 'DC' ] ||  [ "$samba4_role" = 'RODC' ]; then
		create_site "$samba4_join_site"
		SITE_OPTION="--site=$samba4_join_site"
		## use "${SITE_OPTION[@]}" below instead of "$SITE_OPTION" for propper quoting and to avoid passing an empty string
	fi
fi

if [ "$samba4_role" = 'DC' ]; then

	if [ "$samba_share_netlogon" != "yes" ]; then
		univention-config-registry set samba/share/netlogon=yes
	fi

	## check if we there already is a **domaincontroller** providing the service "Samba 4"
	samba4servicedcs=$(ldapsearch -x -ZZ -LLL -D "$ldap_hostdn" -y /etc/machine.secret \
	                   "(&(univentionService=${NAME})(objectClass=univentionDomainController))" cn \
					   | sed -n 's/^cn: \(.*\)/\1/p')	## currently there is no u-d-m module computers/dc

	/etc/init.d/samba4 stop

	is_ucr_true samba4/provision/primary
	if [ $? -eq 0 ] || [ -z "$samba4servicedcs" ]; then	## we are the first domainctontroller to provide this service

		if [ $JS_LAST_EXECUTED_VERSION -lt 1 ]; then
			run_samba_provision "$@"
		fi

		## Add DNS records, allowing finer control over gc and pdc records than samba_dnsupdate
		/usr/share/univention-samba4/scripts/setup-dns-in-ucsldap.sh "$@" --dc --gc --pdc "${SITE_OPTION[@]}"

		if ! univention_samba4_is_ucr_false dns/register/srv_records/kerberos; then
			remove_non_samba4_dc_srv_records
		fi

		operatingSystem_attribute replace

		## Start samba daemon
		/etc/init.d/samba4 start

	else	## otherwise we will simply join the new DC

		if [ $JS_LAST_EXECUTED_VERSION -lt 2 ]; then
			## remove slapd from port 389 on upgrade
			disable_slapd_on_standard_port
		fi

		is_ucr_true samba4/provision/secondary
		if [ $? -eq 0 ]; then
			## secondary provision for selective replication

			if [ $JS_LAST_EXECUTED_VERSION -lt 1 ]; then
				## special case: provision another instance of Samba 4
				## this is similar to univention-samba-slave-pdc
				run_samba_provision "$@"

				## Add DNS records, allowing finer control over gc and pdc records than samba_dnsupdate
				/usr/share/univention-samba4/scripts/setup-dns-in-ucsldap.sh "$@" --dc "${SITE_OPTION[@]}"

				if ! univention_samba4_is_ucr_false dns/register/srv_records/kerberos; then
					remove_non_samba4_dc_srv_records
				fi

				operatingSystem_attribute replace

				# Don't use the default RID pool
				set_rid_pool 2100 2599
			fi

		else
			## regular join

			if [ $JS_LAST_EXECUTED_VERSION -lt 1 ]; then

				if [ -z "$dcaccount" ] &&  [ -z "$bindpwd" ]; then
					echo "Administative credentials are needed to join to existing Samba4 domain. Please run:"
					printf "\tunivention-run-join-scripts --ask-pass\n"
					echo "to complete the domain join."
					exit 1
				fi

				remove_dc_ntds_guid_records_from_dns "$@"

				## Check if this is a re-join
				if [ -n "$samba4_ldap_base" ] && \
					ldbsearch -H  /var/lib/samba/private/sam.ldb samAccountName="$hostname\$" \
						msDS-KeyVersionNumber 2>/dev/null | grep -qi "^msDS-KeyVersionNumber: "
				then
					## backup old keytab if samba4 generated it
					backup_samba4_keytab
					samba_join_options=( --keep-existing )
				fi

				samba_domain_join "${samba_join_options[@]}"

				## if the key version number increased, merge the old keys into the new keytab
				merge_backup_samba4_keytab

			fi

			## Add DNS records, allowing finer control over gc and pdc records than samba_dnsupdate
			/usr/share/univention-samba4/scripts/setup-dns-in-ucsldap.sh "$@" --dc "${SITE_OPTION[@]}"

			operatingSystem_attribute add

		fi

		if [ $JS_LAST_EXECUTED_VERSION -lt 4 ] && [ $JS_LAST_EXECUTED_VERSION -gt 0 ]; then
			create_and_replicate_DnsZone_partitions
		fi

		## Start samba daemon
		/etc/init.d/samba4 start

		## determine default sysvol parent for this host from univentionService="S4 Connector"
		set_samba4_sysvol_sync_host
		/usr/share/univention-samba4/scripts/sysvol-sync.sh

	fi

	if [ $JS_LAST_EXECUTED_VERSION -lt 1 ]; then
		## set the default sysvol and GPO NTACLs
		samba-tool ntacl sysvolreset

		## set default ACLs so sysvol-sync can read files and directories
		set_default_fACL /var/lib/samba/sysvol
	fi

	## activate sysvol replication
	univention-config-registry set samba4/sysvol/sync/cron?"*/5 * * * *"

	# The windows clients connect to //$domainname/sysvol for GPOs during logon
	# Register the local ips for the forward zone, skip with 'ucr set samba4/dns/domain/register=false'
	is_ucr_true samba4/dns/domain/register
	if [ $? != 1 ]; then
		register_server_ips_with_domain "$@"
	fi

	## Kerberos keytab adjustments for Samba 4

	if [ $JS_LAST_EXECUTED_VERSION -lt 1 ]; then
		## Create kerberos service entries for sshd and slapd (ssh and ldapsearch -Y GSSAPI)
		add_servicePrincipals "host/$hostname.$domainname" "ldap/$hostname.$domainname"
	fi

	if [ $JS_LAST_EXECUTED_VERSION -lt 2 ]; then
		let_samba4_manage_etc_krb5_keytab
	fi

elif [ "$samba4_role" = "RODC" ]; then

	if [ -z "$dcaccount" ] &&  [ -z "$bindpwd" ]; then
		echo "Administative credentials are needed to join to existing Samba4 domain. Please run:"
		printf "\tunivention-run-join-scripts --ask-pass\n"
		echo "to complete the domain join."
		exit 1
	fi

	/etc/init.d/samba4 stop


	if [ $JS_LAST_EXECUTED_VERSION -lt 1 ]; then
		## remove slapd from port 389 on upgrade
		disable_slapd_on_standard_port

		remove_dc_ntds_guid_records_from_dns "$@"

		## Check if this is a re-join
		if [ -n "$samba4_ldap_base" ] && \
			ldbsearch -H  /var/lib/samba/private/sam.ldb samAccountName="$hostname\$" \
				msDS-KeyVersionNumber 2>/dev/null | grep -qi "^msDS-KeyVersionNumber: "
		then
			## backup old keytab if samba4 generated it
			backup_samba4_keytab
			samba_join_options=( --keep-existing )
		fi

		samba_domain_join "${samba_join_options[@]}"

		## if the key version number increased, merge the old keys into the new keytab
		merge_backup_samba4_keytab

	fi

	/usr/share/univention-samba4/scripts/setup-dns-in-ucsldap.sh "$@" --rodc "${SITE_OPTION[@]}"

	operatingSystem_attribute add

	## Start samba daemon
	/etc/init.d/samba4 start

	## determine default sysvol parent for this host from univentionService="S4 Connector"
	set_samba4_sysvol_sync_host
	/usr/share/univention-samba4/scripts/sysvol-sync.sh

	if [ $JS_LAST_EXECUTED_VERSION -lt 1 ]; then
		## set the default sysvol and GPO NTACLs
		samba-tool ntacl sysvolreset

		## set default ACLs so sysvol-sync can read files and directories
		set_default_fACL /var/lib/samba/sysvol
	fi

	## activate sysvol replication
	univention-config-registry set samba4/sysvol/sync/cron?"*/5 * * * *"

	# The windows clients connect to //$domainname/sysvol for GPOs during logon
	# Register the local ips for the forward zone, skip with 'ucr set samba4/dns/domain/register=false'
	is_ucr_true samba4/dns/domain/register
	if [ $? != 1 ]; then
		register_server_ips_with_domain "$@"
	fi

	## Kerberos keytab adjustments for Samba 4

	if [ $JS_LAST_EXECUTED_VERSION -lt 1 ]; then
		## Create kerberos service entries for sshd and slapd (ssh and ldapsearch -Y GSSAPI)
		add_servicePrincipals "host/$hostname.$domainname" "ldap/$hostname.$domainname"
	fi

	if [ $JS_LAST_EXECUTED_VERSION -lt 2 ]; then
		let_samba4_manage_etc_krb5_keytab
	fi

elif [ "$samba4_role" = "MEMBER" ]; then

	if [ $JS_LAST_EXECUTED_VERSION -lt 1 ]; then
		samba_domain_join --keep-existing
	fi

	univention-config-registry set samba/share/netlogon?no \
									samba/share/sysvol?no

fi

if [ -n "$samba4_join_site" ] && [ "$samba4_role" != "MEMBER" ]; then
	## create subnet locally
	subnet=$(python -c 'from univention.config_registry.interfaces import Interfaces;print Interfaces().get_default_ip_address().masked()' 2>/dev/null)
	/usr/share/univention-samba4/scripts/univention-samba4-site-tool.py \
			-H "/var/lib/samba/private/sam.ldb" \
			--subnet "$subnet" --createsubnet \
			--site "$samba4_join_site" \
			--ignore-exists
fi

SAMBA_DRIVERS="/var/lib/samba/drivers"
mkdir -p $SAMBA_DRIVERS
chgrp -R "Printer-Admins" $SAMBA_DRIVERS
chmod g+w $SAMBA_DRIVERS
chmod +s $SAMBA_DRIVERS

for X in COLOR IA64 W32ALPHA W32MIPS W32PPC W32X86 WIN40 x64; do
	mkdir -p $SAMBA_DRIVERS/$X;
	chgrp -R "Printer-Admins" $SAMBA_DRIVERS/$X
	chmod g+w $SAMBA_DRIVERS/$X
	chmod +s $SAMBA_DRIVERS/$X
done

# do create and modify in two steps, maybe the share already exists
univention-directory-manager container/cn create "$@" --position "cn=shares,$ldap_base" --ignore_exists --set name=$hostname.$domainname || die
univention-directory-manager container/cn modify "$@" --dn "cn=$hostname.$domainname,cn=shares,$ldap_base" --set sharePath=1 || die


if [ -n "$create_home_share" -a "$create_home_share" = "true" ]; then
	univention-directory-manager shares/share create "$@" \
			--position "cn=$hostname.$domainname,cn=shares,$ldap_base" --ignore_exists \
			--set name=homes --set path=/home --set sambaName=homes \
			--set host=$hostname.$domainname --set writeable=1 --set sambaWriteable=1 || die
	univention-config-registry unset create/home/share
fi

## provision erases the idmap.ldb
/usr/lib/univention-directory-listener/system/samba4-idmap.py --direct-resync 2>/dev/null

/etc/init.d/samba4 restart

ucs_addServiceToLocalhost "${NAME}" "$@"

# re-create /etc/krb5.keytab
#  https://forge.univention.org/bugzilla/show_bug.cgi?id=27426
/usr/share/univention-samba4/scripts/create-keytab.sh

joinscript_save_current_version

exit 0
