#!/usr/bin/python2.6
# -*- coding: utf-8 -*-
#
# Univention Samba
#  helper script: retrieves policies
#
# Copyright 2004-2012 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import os, sys, re, string

opts = string.join(sys.argv[1:], ' ')

__date_regexp=re.compile('([0-9]+) days, ([0-9]+) hours, ([0-9]+) minutes, ([0-9]+) seconds')
def parse_time(date):
	c=__date_regexp.findall(date)
	if not c or len(c[0]) != 4:
		return 0
	c=c[0]
	return int(c[3])+int(c[2])*60+int(c[1])*60*60+int(c[0])*60*60*60

minimum_password_length=-1
minimum_password_age=-1
maximum_password_age=-1

for line in os.popen('/usr/bin/rpcclient -c "querydominfo 1" '+opts).readlines():
	line=line[0:-1]
	var, val=line.split(':')
	var=var.strip()
	val=val.strip()

	if var == 'Minimum password length':
		minimum_password_length=int(val)
	elif var == 'Password uniqueness (remember x passwords)':
		pass
	elif var == 'flag':
		pass
	elif var == 'password expire in':
		maximum_password_age=parse_time(val)
	elif var == 'Min password age (allow changing in x days)':
		minimum_password_age=parse_time(val)
	else:
		print 'E: unknown policy'
		sys.exit(1)

print 'minimum password length: %d' % minimum_password_length
os.system('pdbedit -P "min password length" -C "%s"' % minimum_password_length)

print 'minimum password age: %d' % minimum_password_age
os.system('pdbedit -P "minimum password age" -C "%s"' % minimum_password_age)

print 'maximum password age: %d' % maximum_password_age
os.system('pdbedit -P "maximum password age" -C "%s"' % maximum_password_age)
