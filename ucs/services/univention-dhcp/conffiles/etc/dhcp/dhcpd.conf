@%@UCRWARNING=# @%@

include "/etc/dhcp/univention.conf";
include "/etc/dhcp/local.conf";

option ldap-servers code 128 = array of ip-address;
option ldap-base code 129 = string;

@!@
OPTIONS_PREFIX = 'dhcpd/options/'
for key in configRegistry.keys():
	if not key.startswith( OPTIONS_PREFIX ):
		continue
	option = key[ len( OPTIONS_PREFIX ) : ]
	value = configRegistry.get( key )
	if not option or not value:
		continue
	try:
		name, code = option.split( '/', 1 )
	except ValueError:
		continue
	print 'option %s code %s = %s;' % ( name, code, value )

if configRegistry.get( 'dhcpd/authoritative', '' ).lower() in ( 'yes', 'true', '1' ):
   print 'authoritative;'
@!@

ldap-server "@%@ldap/server/name@%@";
ldap-dhcp-server-cn "@%@hostname@%@";
ldap-username "@%@ldap/hostdn@%@";
ldap-password-file "/etc/machine.secret";
@!@
print 'ldap-port %s;' % configRegistry.get('ldap/server/port', 389)
if configRegistry.get('dhcpd/ldap/base'):
	print 'ldap-base-dn "%s";' % configRegistry['dhcpd/ldap/base']
else:
	print 'ldap-base-dn "cn=dhcp,%s";' % configRegistry['ldap/base']
@!@ldap-method dynamic;
# ldap-debug-file "/var/log/dhcp-ldap-startup.log";

# dynamic DNS: with external name server only!
@!@
import os

if configRegistry.is_true('dhcpd/ddns', False):
	print 'ddns-updates on;'
	print 'ddns-update-style %s;' % configRegistry.get( 'dhcpd/ddns/style', 'interim' )
	print 'ddns-domainname "%s";' % configRegistry.get( 'dhcpd/ddns/domainname',
													   configRegistry[ 'domainname' ] )
	hostname_default = 'binary-to-ascii (16, 8, "-",substring (hardware, 1, 12))'
	print 'ddns-hostname = %s;' % configRegistry.get( 'dhcpd/ddns/hostname', hostname_default )
	if configRegistry.is_true('dhcpd/ddns/static', False):
		print 'update-static-leases true;'
	else:
		print 'update-static-leases false;'

	# security?
	security = None
	if configRegistry.is_true('dhcpd/ddns/security', False):
		security = configRegistry.get( 'dhcpd/ddns/security/key', 'DHCP_UPDATER' )
		secret = configRegistry.get( 'dhcpd/ddns/security/secret', None )
		if secret and os.path.exists( secret ):
			secret = open( secret ).readline()
			if secret[ -1 ] == '\n':
				secret = secret[ : -1 ]
		else:
			secret = ''
		print '''
key %s {
	algorithm %s;
	secret "%s";
}

''' % ( security, configRegistry.get( 'dhcpd/ddns/security/algorithm', 'HMAC-MD5.SIG-ALG.REG.INT' ),
		secret )

	# zones to update
	zones = []
	for key in configRegistry.keys():
		if not key.startswith( 'dhcpd/ddns/zone/' ):
			continue
		num, info = key[ 16 : ].split( '/', 1 )
		if not num in zones:
			zones.append( num )

	for zone in zones:
		prefix = 'dhcpd/ddns/zone/' + zone
		if configRegistry.has_key( prefix + '/name' ) and \
		   configRegistry.has_key( prefix + '/primary' ):
			if security:
				key = 'key %s;' % security
			else:
				key = ''
			print '''
zone %s {
	primary %s;
	%s
}

''' % ( configRegistry[ prefix + '/name' ], configRegistry[ prefix + '/primary' ], key )

@!@
