@%@UCRWARNING=# @%@
#
# GDM Configuration file.  You can use gdmsetup program to graphically
# edit this, or you can optionally just edit this file by hand.  Note that
# gdmsetup does not tweak every option here, just the ones most users
# would care about.  Rest is for special setups and distro specific
# tweaks.  If you edit this file, you should send the HUP or USR1 signal to
# the daemon so that it restarts: (Assuming you have not changed PidFile)
#   kill -USR1 `cat /var/run/gdm.pid`
# (HUP will make gdm restart immediately while USR1 will make gdm not kill
# existing sessions and will only restart gdm after all users log out)
#
# You can also use the gdm-restart and gdm-safe-restart scripts which just
# do the above for you.
#
# Have fun! - George

[daemon]
# Automatic login, if true the first local screen will automatically logged
# in as user as set with AutomaticLogin key.
@!@
if baseConfig.get( 'univentionAutoStartScript', 'none' ).lower() != 'none':
	print '''
TimedLoginEnable=true
TimedLogin=autostart
TimedLoginDelay=0
'''
else:
	print '''
TimedLoginEnable=false
'''
@!@
# If you are having trouble with using a single server for a long time and
# want gdm to kill/restart the server, turn this on
# Note: I've made this default to true now because there seem to be some
# issues ranging from some things not being reset in the X server to
# pam issues with the slave.  It is likely that this feature may be removed
# in the future and we're always going to do server restarts.
AlwaysRestartServer=true
# The gdm configuration program that is run from the login screen, you should
# probably leave this alone
@!@
if baseConfig.get('gdm/session/default', False):
   print 'GnomeDefaultSession=/etc/gdm/Sessions/' + baseConfig['gdm/session/default']
else:
   print 'GnomeDefaultSession=/etc/gdm/Sessions/Linux-Arbeitsplatz'
@!@
# Default path to set.  The profile scripts will likely override this
DefaultPath=/bin:/usr/bin:/usr/bin/X11:/usr/X11R6/bin:/usr/local/bin:/usr/bin
# Default path for root.  The profile scripts will likely override this
RootPath=/sbin:/usr/sbin:/bin:/usr/bin:/usr/bin/X11:/usr/X11R6/bin:/usr/games:/usr/local/bin:/usr/bin
DisplayInitDir=/etc/gdm/Init
# Greeter for local (non-xdmcp) logins.  Change gdmlogin to gdmgreeter to
# get the new graphical greeter.
Greeter=/usr/lib/gdm/gdmgreeter
# Greeter for xdmcp logins, usually you want a less graphically intensive
# greeter here so it's better to leave this with gdmlogin
RemoteGreeter=/usr/bin/gdmlogin
# User and group that gdm should run as.  Probably should be gdm and gdm and
# you should create these user and group.  Anyone found running this as
# someone too privilaged will get a kick in the ass.  This should have
# access to only the gdm directories and files.
User=gdm
Group=gdm
# To try to kill all clients started at greeter time or in the Init script.
# doesn't always work, only if those clients have a window of their own
KillInitClients=true
LogDir=/var/log/gdm
# You should probably never change this value unless you have a weird setup
PidFile=/var/run/gdm.pid
PostSessionScriptDir=/etc/gdm/PostSession/
PreSessionScriptDir=/etc/gdm/PreSession/
# Distributions:  If you have some script that runs an X server in say
# VGA mode, allowing a login, could you please send it to me?
FailsafeXServer=
# if X keeps crashing on us we run this script.  The default one does a bunch
# of cool stuff to figure out what to tell the user and such and can
# run an X configuration program.
XKeepsCrashing=/etc/gdm/XKeepsCrashing

# Probably should not touch the below this is the standard setup
ServAuthDir=/var/lib/gdm
@!@
if baseConfig.has_key('gdm/session/dir') and baseConfig['gdm/session/dir']:
	print 'SessionDir=%s' % baseConfig['gdm/session/dir']
else:
	print 'SessionDir=/etc/gdm/Sessions/'
@!@
# This is our standard startup script.  A bit different from a normal
# X session, but it shares a lot of stuff with that.  See the provided
# default for more information.
@!@
if baseConfig.has_key('univentionAutoStartScript') and baseConfig['univentionAutoStartScript'] and baseConfig['univentionAutoStartScript'].lower() != 'none':
	print 'BaseXsession=/etc/gdm/Autostart/%s' %  baseConfig['univentionAutoStartScript'].strip('"')
else:
	print 'BaseXsession=/etc/gdm/Xsession'
@!@
# This is a directory where .desktop files describing the sessions live
# It is really a PATH style variable since 2.4.4.2 to allow actual
# interoperability with KDM.  Note that <sysconfdir>/dm/Sessions is there
# for backwards compatibility reasons with 2.4.4.x
SessionDesktopDir=/etc/gdm/Sessions/
# This is the default .desktop session.  One of the ones in SessionDesktopDir
@!@
if baseConfig.get('gdm/session/default', False):
   print 'DefaultSession=' + baseConfig['gdm/session/default'] + '.desktop'
else:
   print 'DefaultSession=Linux-Arbeitsplatz.desktop'
@!@
# Fallback if home directory not writable
UserAuthFBDir=/tmp
UserAuthFile=.Xauthority
# The X server to use if we can't figure out what else to run.
StandardXServer=/usr/bin/X

[security]
# If any distributions ship with this one off, they should be shot
# this is only local, so it's only for say kiosk use, when you
# want to minimize possibility of breakin
@!@
print 'AllowRoot=%s' % baseConfig.get( 'gdm/allowroot', 'false' )
print 'AllowRemoteRoot=%s' % baseConfig.get( 'gdm/allowremoteroot', 'false' )
@!@
# This will allow remote timed login
AllowRemoteAutoLogin=false
@!@
if baseConfig.has_key('gdm/disallow/tcp') and baseConfig['gdm/disallow/tcp'].lower() in ['true', 'yes', '1']:
	print 'DisallowTCP=true'
else:
	print 'DisallowTCP=false'

if baseConfig.get( 'gdm/relaxpermissions', False ) in ['0','1','2']:
	print '''
#  By default GDM ignores files and directories writable to other users than the owner.
#  Changing the value of RelaxPermissions makes it possible to alter this behaviour:
#  0 - Paranoia option. Only accepts user owned files and directories.
#  1 - Allow group writable files and directories.
#  2 - Allow world writable files and directories. '''
	print 'RelaxPermissions=%s' % baseConfig.get('gdm/relaxpermissions', False)
@!@

# XDMCP is the protocol that allows remote login.  If you want to log into
# gdm remotely (I'd never turn this on on open network, use ssh for such
# remote usage that).  You can then run X with -query <thishost> to log in,
# or -indirect <thishost> to run a chooser.  Look for the 'Terminal' server
# type at the bottom of this config file.
[xdmcp]
# Distributions: Ship with this off.  It is never a safe thing to leave
# out on the net.  Alternatively you can set up /etc/hosts.allow and
# /etc/hosts.deny to only allow say local access.
@!@
if baseConfig.get('gdm/xdmcp', 'no').lower() in ('yes','true'):
	print 'Enable=true'
else:
	print 'Enable=false'
@!@

[gui]
# The 'theme'.  By default we're using the default gtk theme
# Of course assuming that gtk got installed in the same prefix,
# if not change this.
GtkRC=/usr/share/themes/Default/gtk/gtkrc
# Maximum size of an icon, larger icons are scaled down
MaxIconWidth=128
MaxIconHeight=128

[greeter]
# do not show the failsafe gnome xterm sessions
ShowGnomeFailsafeSession=false
ShowXtermFailsafeSession=false
SoundOnLogin=false
TitleBar=true
# Configuration is available from the system menu of the greeter
ConfigAvailable=false
# Face browser is enabled.  This only works currently for the
# standard greeter as it is not yet enabled in the graphical greeter.
Browser=false
# The default picture in the browser
DefaultFace=/usr/share/pixmaps/nobody.png
# These are things excluded from the face browser, not from logging in
Exclude=bin,daemon,adm,lp,sync,shutdown,halt,mail,news,uucp,operator,nobody,alias,backup,games,gnats,irc,list,majordom,man,msql,postgres,proxy,qmaild,qmaill,qmailp,qmailq,qmailr,qmails,sys,www-data,fetchmail,xpilots
# As an alternative to the above this is the minimum uid to show
MinimalUID=100
# If user or user.png exists in this dir it will be used as his picture
GlobalFaceDir=/usr/share/faces/
# Icon we use
Icon=/usr/share/pixmaps/gdm.png
# File which contains the locale we show to the user.  Likely you want to use
# the one shipped with gdm and edit it.  It is not a standard locale.alias file,
# although gdm will be able to read a standard locale.alias file as well.
LocaleFile=/etc/gdm/locale.conf
# Logo shown in the standard greeter
Logo=/usr/share/pixmaps/gdmDebianLogo.xpm
# The standard greeter should shake if a user entered the wrong username or
# password.  Kind of cool looking
Quiver=true
@!@
# The system menu is shown in the greeter
print 'SystemMenu=%s' % baseConfig.get( 'gdm/systemmenu', 'true' )
#SecureSystemMenu diallows shutdown for normal users
print 'SecureSystemMenu=%s' % baseConfig.get( 'gdm/menu/securesystem', 'true' )
@!@
# Type can be 0=None, 1=Image, 2=Color
BackgroundType=2
@!@
if baseConfig.has_key('gdm/theme') and baseConfig['gdm/theme']:
	print 'GraphicalTheme=%s' % baseConfig['gdm/theme']
else:
	print 'GraphicalTheme=univention'
if baseConfig.has_key('gdm/theme/dir') and baseConfig['gdm/theme/dir']:
	print 'GraphicalThemeDir=%s' % baseConfig['gdm/theme/dir']
else:
	print 'GraphicalThemeDir=/usr/share/gdm/themes/'
@!@
GraphicalThemedColor=#000000
@!@
if baseConfig.get('gdm/xdmcp', 'no').lower() in ('yes','true'):
	print 'ChooserButton=true'
else:
	print 'ChooserButton=false'
@!@

[debug]
# This will enable debugging into the syslog, usually not neccessary
# and it creates a LOT of spew of random stuff to the syslog.  However it
# can be useful in determining when something is going very wrong.
Enable=false

[servers]
# Definition of the standard X server.
[server-Standard]
name=Standard server
command=/usr/bin/X :0 -audit 0 -deferglyphs 16 -br -auth /var/lib/gdm/:0.Xauth

