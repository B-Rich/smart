#!/usr/bin/python2.6
# -*- coding: utf-8 -*-
#
# Univention Admin Modules
#  the command line client program
#
# Copyright 2004-2012 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.


import locale
import socket
import time
import os
import sys
import string
import codecs
from univention.config_registry import ConfigRegistry

socket_dir='/tmp/admincli_%s/' % os.getuid()
socket_filename='sock'
socket_path=(socket_dir+socket_filename)

s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)

cmd=''
data=''
output=[]
logfile=''

pos = 0
for arg in sys.argv:
	pos += 1
	if '--logfile' == arg[:9]:
		if len(arg) > 10 and arg[9] == "=":
			logfile = arg[10:]
		else:
			try:
				logfile=sys.argv[pos]
			except:
				print "E: Option --logfile requires an argument"
				sys.exit(1)
			
try:
	s.connect(socket_path)
except:
	pid=os.fork()
	if not pid:
		null = os.open('/dev/null', os.O_RDWR)
		os.dup2(null, sys.stdin.fileno())
		os.dup2(null, sys.stdout.fileno())
		os.dup2(null, sys.stderr.fileno())
		if len(logfile) >0:
			os.execv('/usr/share/univention-directory-manager-tools/univention-cli-server', ['univention-cli-server', logfile])
		else:
			os.execv('/usr/share/univention-directory-manager-tools/univention-cli-server', ['univention-cli-server'])
	else:
		os.waitpid(pid, os.P_NOWAIT)

	ucr = ConfigRegistry()
	ucr.load()
	socket_timeout = int(ucr.get('directory/manager/cmd/sockettimeout', '50'))
	stime=int(time.time())
	while not os.path.exists('%s' % socket_path):
		time.sleep(0.1)
		if int(time.time()) > stime+socket_timeout:
			print 'E: Can`t find running daemon after %s Seconds. (No socketfile)' % socket_timeout
			sys.exit(1)
	
	connection_timeout=30 # this took a long time if getfqdn(host) was used in cli-server
	stime=int(time.time())
	socking=0
	while socking == 0:
		try:
			s.connect(socket_path)
			socking=1
		except:
			time.sleep(0.1)
			if int(time.time()) > stime+connection_timeout:
				print 'E: Can`t connect daemon after %s seconds.' % connection_timeout
				sys.exit(1)
			
			#sys.exit(1)

cmdfile=os.path.basename(sys.argv[0])
if cmdfile == 'univention-passwd':
	pwd1='x'
	pwd2='y'
	while pwd1 != pwd2:
		pwd1=raw_input('New password ')
		pwd2=raw_input('Re-enter new password ')
		if pwd1 != pwd2:
			print 'password missmatch'
	sys.argv.append('--pwd')
	sys.argv.append(pwd1)



s.send(repr(sys.argv)+'\0')

while 1:
	buf = s.recv(1024)
	if len(buf) <= 0:
		print 'E: Daemon died.'
		sys.exit(1)
	elif buf[-1] == '\0':
		buf = buf[0:-1]
		data += buf
		break
	else:
		data += buf

rc=0
output = eval(data)
s.close()
if cmdfile == 'univention-passwd':
	for line in output:
		if line.startswith('passwd error: '):
			print line
			if line == 'passwd error: password alreay used':
				rc=1
			elif line.startswith('passwd error: The password is to short'):
				rc=2
		else:
			print line
else:
	if output[-1] == "OPERATION FAILED":
		rc = 3
		output = output [:-1]
	for i in output:
		if type(i) is unicode:
			print i.encode(locale.getpreferredencoding(), 'replace')
		else:
			print i

sys.exit(rc)
