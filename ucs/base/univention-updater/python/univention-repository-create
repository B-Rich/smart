#!/usr/bin/python2.6
# -*- coding: utf-8 -*-
#
# Univention Updater
#  creates a repository
#
# Copyright 2004-2012 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.
#

import os
import errno
from optparse import OptionParser
import shutil
import string
import subprocess
import sys

import univention.config_registry as ucr
import univention.updater.repository as urepo
import univention.updater.tools

configRegistry = ucr.ConfigRegistry()
configRegistry.load()

_mirror_base = configRegistry.get( 'repository/mirror/basepath', '/var/lib/univention-repository' )
_repo_base = "" # this path is set later in __main__ 

def check_preconditions( options ):
	""" Check for already existing mirror and for debmirror package """
	# check directories
	if os.path.exists( os.path.join( _mirror_base, 'mirror' ) ):
		print >> sys.stderr, 'Warning: The path %s/mirror already exists.' % _mirror_base

	if options.interactive:
		print "Are you sure you want to create a local repository? [yN] ",
		sys.stdin.flush()
		if not sys.stdin.readline().startswith( 'y' ):
			print >> sys.stderr, 'Aborted.'
			sys.exit( 1 )

	# install univention-debmirror
	print 'Installing univention-debmirror'
	ret=subprocess.call( ['univention-install', '--yes', 'univention-debmirror' ] )
	if ret != 0:
		print >> sys.stderr, 'Error: Failed to install univention-debmirror'
		sys.exit( 1 )

	ret, msg = urepo.is_debmirror_installed()
	if not ret:
		print >> sys.stderr, msg
		sys.exit( 1 )

def  prepare( options ):
	""" Set local/repository and create directory structure """
	# set local/repository
	if configRegistry.is_false( 'local/repository', True ):
		ucr.handler_set( [ 'local/repository=yes' ] )
		configRegistry.load()

	if configRegistry.is_false( 'repository/mirror', True):
		ucr.handler_set( [ 'repository/mirror=yes' ] )
		configRegistry.load()

	# create directory structure
	try:
		os.makedirs( _repo_base )
	except OSError, ex:
		# already exists -> ignore
		if ex.errno != errno.EEXIST:
			raise ex
	for arch in urepo.ARCHITECTURES:
		try:
			os.makedirs( os.path.join( _repo_base, arch ) )
		except OSError, ex:
			# already exists -> ignore
			if ex.errno != errno.EEXIST:
				raise ex

def copy_repository( options ):
	""" Copy version info, kernels, grub configuration, profiles, packages and dists """
	print 'Copying data. Please be patient ...'

	print '  copying version information ...',
	try:
		shutil.copy2( os.path.join( options.mount_point, '.univention_install' ), _mirror_base )
	except:
		print 'failed.'
	else:
		print 'done.'

	# copy kernel and grub config
	print '  copying kernel and boot configuration ...',
	boot_dest = os.path.join( _mirror_base, 'boot' )
	if os.path.isdir( boot_dest ):
		shutil.rmtree( boot_dest )
	try:
		shutil.copytree( os.path.join( options.mount_point, 'boot' ), boot_dest )
	except shutil.Error, ex:
		print "failed (%s)." % (ex,)
	else:
		print 'done.'

	# copy profiles
	print '  copying profiles ...',
	profiles_dest = os.path.join( _mirror_base, 'profiles' )
	if os.path.isdir( profiles_dest ):
		shutil.rmtree( profiles_dest )
	try:
		shutil.copytree( os.path.join( options.mount_point, 'profiles' ), profiles_dest )
	except shutil.Error, ex:
		print "failed (%s)." % (ex,)
	else:
		# everyone should be able to read the profiles
		os.chmod( profiles_dest, 0555 )
		print 'done.'

	# copy packages to new directory structure
	print '  copying packages ...',
	sys.stdout.flush()
	urepo.copy_package_files( os.path.join( options.mount_point, 'packages' ), _repo_base )
	print "done."

	# copy dists directory structure
	print '  copying dists ...',
	dists_dest = os.path.join( _repo_base, 'dists' )
	if os.path.isdir( dists_dest ):
		shutil.rmtree( dists_dest )
	try:
		shutil.copytree( os.path.join( options.mount_point, 'packages', 'dists' ), dists_dest )
	except shutil.Error, ex:
		print "failed (%s)." % (ex,)
	else:
		print 'done.'

def mount( options ):
	""" Mount CDROM and check for valid medium """
	if options.interactive:
		# ask user to insert cdrom
		print 'Please insert a UCS installation medium and press <Enter>',
		sys.stdin.readline()
	if options.mount:
		print "Mounting %s ..." % options.mount_point,
		if options.iso:
			cmd = ('mount', '-o', 'loop,ro', options.iso, options.mount_point)
		else:
			cmd = ('mount', '-o', 'ro', options.mount_point)
		devnull = open( os.path.devnull, 'w' )
		try:
			ret = subprocess.call(cmd, stdout=devnull, stderr=subprocess.STDOUT)
		finally:
			devnull.close()
		# if exit code is 0 or 32 (already mounted)
		if ret in (0, 32):
			print 'done.'
		else:
			print 'failed.'
			return False

	print "Checking medium in %s ..." % options.mount_point,
	if not os.path.isdir( os.path.join( options.mount_point, 'packages' ) ) or not os.path.isdir( os.path.join( options.mount_point, 'profiles' ) ):
		print 'failed.'
		print >> sys.stderr, 'Error: This is not an UCS installation medium.'
		return False

	print 'ok.'
	return True

def setup_repository( options ):
	""" Update indexes """
	urepo.update_indexes( _repo_base, dists = True )

	basepath = configRegistry.get('repository/mirror/basepath', '/var/lib/univention-repository')
	for p in ['var', 'skel']:
		d = os.path.join(basepath, p)
		if not os.path.exists(d):
			os.mkdir(d)

def setup_pxe( options ):
	'''setup network installation (PXE)'''
	pxedir = '/var/lib/univention-client-boot'
	bootdir = '/var/lib/univention-repository/boot'

	# Create symlinks
	pxekernel = os.path.join(pxedir, 'linux-server')
	pxeinitrd = os.path.join(pxedir, 'linux.bin')
	for pxefile in [pxekernel, pxeinitrd]:
		if os.path.islink(pxefile):
			os.remove(pxefile)
	# read the default kernel from the grub cfg
	grubcfg = os.path.join(bootdir, 'grub/grub.cfg')
	grubcfg_fd = open(grubcfg)
	for line in grubcfg_fd.readlines():
		line = line.strip()
		if line.startswith('linux '):
			kernel = line.split(' ')[1]
			kernel = string.replace(kernel, '/boot/', '')
	if not kernel:
		print 'Failed to search kernel'
		return 1

	if not os.path.exists(pxedir):
		os.mkdir(pxedir)

	cdkernel = os.path.join(bootdir, kernel)
	cdinitrd = os.path.join(bootdir, '%s.bin' % kernel)
	if os.path.exists(cdkernel):
		os.symlink(cdkernel, pxekernel)
	if os.path.exists(cdinitrd):
		os.symlink(cdinitrd, pxeinitrd)

if __name__ == '__main__':
	parser = OptionParser( usage = "usage: %prog [options]" )
	parser.add_option( '-n', '--non-interactive', action = 'store_false',
					   dest = 'interactive', default = True,
					   help = 'if given no questions are asked.' )
	parser.add_option( '-N', '--no-mount', action = 'store_false',
					   dest = 'mount', default = True,
					   help = 'mounting the installation media is not required' )
	parser.add_option( '-s', '--silent', action = 'store_true',
					   dest = 'silent', default = False,
					   help = 'do not print any information, just errors and warnings' )
	parser.add_option( '-m', '--mount-point', action = 'store',
					   dest = 'mount_point', default = '/cdrom',
					   help = 'devices mount point for CD-ROM drive' )
	parser.add_option('-i', '--iso', action='store', dest='iso',
	                  default=None, help='define filename of an ISO image')

	( options, arguments ) = parser.parse_args()

	if options.silent:
		sys.stdout = open(os.path.devnull, 'w')

	try:
		lock = univention.updater.tools.updater_lock_acquire()
	except univention.updater.tools.LockingError, ex:
		print >>sys.stderr, ex
		sys.exit(5)
	try:
		if not mount( options ):
			print >>sys.stderr, "Error: Failed to mount CD-ROM device at %s" % options.mount_point
			sys.exit( 1 )

		#define repository base path with information from image
		installfile = os.path.join(options.mount_point, '.univention_install')
                for line in open(installfile).readlines():
			if line.startswith('VERSION='):
				version = string.replace(line, 'VERSION=', '')
				major_version = version.split('.', 1)[0].strip()
				minor_version = version.split('.', 1)[1].strip()
				break

		_repo_base = os.path.join( _mirror_base, 'mirror', '%s.%s' % (major_version, minor_version), 'maintained', '%s.%s-0' % (major_version, minor_version) )
		
		check_preconditions( options )
		prepare( options )

		try:
			copy_repository( options )
			setup_repository( options )
			setup_pxe( options )
		finally:
			if options.mount:
				subprocess.call( [ 'umount', options.mount_point ] )

		# set repository server to local system
		fqdn = '%s.%s' % ( configRegistry.get( 'hostname' ), configRegistry.get( 'domainname' ) )
		ucr.handler_set( [ 'repository/online/server=%s' % fqdn ] )

		# unset UCR variable marking old repository
		if 'repository/local/old' in configRegistry:
			ucr.handler_unset( 'repository/local/old' )

		# set start version for synchronsation of repository
		if major_version:
			ucr.handler_set( [ 'repository/mirror/version/start?%s.0-0' % major_version ] )

		# create symbolic link univention-repository
		try:
			basepath = configRegistry.get('repository/mirror/basepath', '/var/lib/univention-repository')
			os.symlink('.', os.path.join(basepath, 'mirror', 'univention-repository'))
		except OSError, ex:
			if ex.errno != errno.EEXIST:
				raise

		print """
		The local repository has been created.

		UCS validates the archive integrity through signed Release files (using the
		secure APT mechanism). Secure APT is not yet available for local repositories.
		As such, it should be disabled on this and all other hosts using this
		repository by setting the Univention Configuration Registry (UCR) variable
		update/secure_apt to no:

		  ucr set update/secure_apt=no

		This is best done in a domain by defining an UCR Policy, which sets this variable
		and is applied to all hosts using this repository server.
		""".replace('\t\t', '')

		if not minor_version == '0':
			print """
			An UCS repository must always start with minor version 0, for example
			with UCS %(major)s.0. Please synchronize the repository from %(major)s.0 to %(major)s.%(minor)s
			by using the tool univention-repository-update.
			""".replace('\t\t\t', '') % {'major': major_version, 'minor': minor_version}

	finally:
		if not univention.updater.tools.updater_lock_release(lock):
			print 'WARNING: updater-lock already released!'
